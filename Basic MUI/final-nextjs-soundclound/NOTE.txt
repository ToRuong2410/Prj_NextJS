FIXME:Các công cụ được sử dụng thêm: 
    - MUI (cũng giống như Ant design đều là các thư viện UI phổ biến)
        + MUI là 1 thư viện cho phép sử dụng các component được viết sẵn dành cho React
        + Phong cách design của MUI bị ảnh hưởng bởi Google's Material Design (giao diện
        sam same)
    - Mô hình được sử dụng  để chia các file là route group

FIXME:
----------------------------------------------------------------
JSON.stringify là một hàm trong JavaScript được sử dụng để chuyển đổi một đối tượng JavaScript sang
chuỗi JSON. Hàm này nhận vào một đối tượng và trả về một chuỗi JSON tương ứng.

JSON.parse là một hàm trong JavaScript được sử dụng để chuyển đổi một chuỗi JSON thành một đối tượng 
JavaScript. Hàm này nhận vào một chuỗi JSON và trả về một đối tượng tương ứng.
        
----------------------------------------------------------------
nếu 1 hàm là 1 Promise(kiểm tra mã nguồn, ktra tài liều) -> dùng await async có thể lấy được giá 
trị trả về
const ham = async() =>{
    const res = await signIn("credentials", {
        username: username,
        password: password,
        redirect: false,
    });
}

FIXME: 
- Toán tử Optional chaining (?.): Toán tử này cho phép truy cập các thuộc tính của một đối tượng mà 
không lo lắng về việc đối tượng đó có tồn tại hay không. Nếu đối tượng không tồn tại 
(null hoặc undefined), nó sẽ trả về undefined thay vì gây ra lỗi. Điều này hữu ích khi bạn muốn 
truy cập một thuộc tính sâu trong một chuỗi các đối tượng mà một hoặc nhiều trong số chúng có thể 
không tồn tại.

- Toán tử Nullish coalescing (??): Toán tử này được sử dụng để thiết lập một giá trị mặc định cho biến 
nếu biến đó là null hoặc undefined. Nó trả về giá trị bên phải nếu giá trị bên trái là null hoặc 
undefined; nếu giá trị bên trái không phải là null hoặc undefined, nó trả về giá trị bên trái. 
Điều này hữu ích khi bạn muốn thiết lập một giá trị mặc định cho một biến nếu nó không tồn tại 
hoặc có giá trị là null.

TODO:========== NextJS ==========#78
Next.js là framework javascript, tích hợp sẵn React, dùng để build website
-framework: có nghĩa rằng, nó đã cho sẵn bộ khung và làm sẵn nhiều tính năng, chúng
ta chỉ dùng thôi

TODO:========== Routing với nextJS ==========#86
1. Khai báo route
- Nextjs sử dụng "tên thư mục" (folder) để định nghĩa route
=> tạo thêm folder bên trong thư mục "app"

2. File conventions
layout: share layout giữa các page con.
page: định nghĩa giao diện cho page

Những cách sử dụng chính:
Using the <Link> Component
Using the useRouter hook (Client Components)
Using the redirect function (Server Components)

TODO:========== Sever Component và Client Component ==========#93+94
--- Sever Component 
Mặc định, tất cả “component” của Nextjs, là Server Component
Server Component chỉ đơn thuần là HTML (không có sự tương tác của Javascript)
=> không dùng các function xử lý sự kiện hay các hook của React
    Lợi ích của server component:
        + Tốc độ load page nhanh
        + Cache
        + Security
        + SEO
Server component có thể bọc “Client component”

--- Client component
Cần có sự tương tác => sử dụng client component
Ví dụ: useState, useEffect…

TODO:========== 'use client' ==========#96
'use client' là một cái tag giúp báo với NextJS là đang sử dụng Client component #96
Server component: render 100% trên server, tạo ra file HTML gửi về cho client.
Client chỉ việc hiển thị mà không cần làm gì khác.
=> hiểu đơn giản là SSR (server side rendering), so sánh với CSR (client side rendering)
khi dùng với React thuần (Vite)
Client component: render ở phía client liệu có chính xác ?
- Giúp có sự tương tác với website
- Tương tác với browser API, ví dụ localStorage, windows…
- Để sử dụng client component, cần sử dụng “use-client”
1.Use-client
    Use client, không có nghĩa là 100% component sẽ được render ở phía client (như
    client side rendering)
    Nhiệm vụ của Nextjs là pre-render trước khi gửi về cho client.

Mô hình khi sử dụng use-client:
    Phase 1: pre-render
        Nextjs sẽ tạo trước file html mà không có sự tương tác của HTML, sau đấy gửi về client
        (như vậy được ½ quá trình)
    Phase 2: hidrate
        Client nhận về file HTML đã được render trước từ Nextjs, sau đấy dùng React để thêm
        phần tương tác Javascript

FIXME: Các thư viện cài thêm: 
npm i --save-exact react-slick@0.29.0 slick-carousel@1.8.1
npm i --save-dev @types/react-slick
npm i --save-exact react-h5-audio-player@3.8.6

TODO:========== Nextjs Environment Variables ==========#99
    1. Mặc định, nextjs đã support .env => không cần cài đặt thêm thư viện nào khác
Tạo file .env ở root folder
Với môi trường development => .env.local / .env.development
môi trường production => .env.production
=> không quan tâm về môi trường => .env

Lưu ý về môi trường browser và server:
https://nextjs.org/docs/app/building-your-application/configuring/environmentvariables#bundling-environment-variables-for-the-browser

=> những tham số nào chạy ở browser => thêm tiền tố NEXT_PUBLIC_(dùng để chạy ở client)

    2. Áp dụng
Tạo .env cho url backend

TODO:========== Fetch data với NextJS ==========#101
    1. Hiểu về Next.js
Node.js là môi trường thực thi javascript.
javascript có thể chạy tại client hoặc server
client: browser
server: các máy chủ
Nextjs = code javascript chạy tại server đồng thời code js gửi về cho client
    2. Fetch Data
Whenever possible, we recommend fetching data on the server
=> Nếu có thể, ưu tiên fetch data trên server

Với Nextjs, có 2 cách fetch data:
    1. Fetch data trên server (logic fetch data chạy tại server) (Server side rendering)
    => sử dụng được cách này, vì server có khả năng kết nối tới database
    2. Fetch data tại browser (sử dụng tại useEffect, mô hình Client side rendering)
    Tại client, không thể viết code như cách fetch trên server, vì môi trường chạy code
    là browser => bắt buộc viết trong hàm useEffect (khi DOM đã sẵn sàng)

--- Tối ưu: sử dụng wrapper(giống như 1 Container-thùng chứa viết 1 lớp tổng quát sau đó
truyền các func xuống -> giúp viết code đơn giản hơn) #103

FIXME: Các thư viện cài thêm: 
npm i --save-exact query-string@8.1.0

TODO: Generic type: 1 kiểu định dạng dữ liệu
T là định dạng dữ liệu muốn truyền vào cùng như trả về (hoặc dùng để ép kiểu)
        Cách sử dụng: 
        function xuly<T>( p1: T): T { return p1; }
        let hoten = xuly<string>("Trần Nhân Tông"); //Trần Nhân Tông
        let nam = xuly<number>(1258); //1258

TODO:========== Dynamic Route ==========#105
lấy đường link động 
-> truy cập linh động (như đường link bài hát do có nhiều bài hát - mỗi bài yêu cầu
1 đường link khác nhau -> nhằm hiển thị nội dung khác nhau)

useSearchParams(): lấy thông tin đường link url 

FIXME:
npm i --save-exact wavesurfer.js@7.3.1

TODO:========== useEffect ==========
Việc hàm hook useEffect chạy 2 lần mà trong khi dependencies = []
    1.Lỗi trong mã JavaScript hoặc React: Đôi khi, việc sử dụng hooks và lifecycle methods có 
    thể dẫn đến các hành vi không mong muốn do lỗi trong mã. Kiểm tra lại mã của bạn để đảm bảo
    không có lỗi nào xảy ra.

    2.Rendering hai lần: Đôi khi, component có thể được render hai lần với một khoảng thời gian 
    ngắn. Điều này có thể xảy ra trong một số trường hợp như khi một component cha render lại, 
    component con cũng sẽ render lại. Trong trường hợp này, useEffect sẽ chạy một lần cho mỗi 
    lần render. Bạn có thể kiểm tra lại xem component của bạn có được render hai lần không.

    3.Development Environment: Trong môi trường phát triển (development environment), React có 
    thể chạy một số lượt kiểm tra để đảm bảo tính đúng đắn của ứng dụng. Điều này có thể dẫn 
    đến việc gọi các hooks nhiều lần một cách tạm thời. Tuy nhiên, trong môi trường production, 
    điều này sẽ không xảy ra.

TODO:========== React ref ==========#110
    Lý do: Gần như không bao h sử dụng id trong react (việc trùng id có thể xảy ra -> thao tác 
    với id không chính xác nữa) / sử dụng thay cho getElemntBy...

useRef là một hook trong React được sử dụng để lưu trữ và truy cập đến một biến có thể thay 
đổi giữa các lần render của component mà không gây ra việc render lại component đó. useRef 
cung cấp một cách để thực hiện các tác vụ như lưu trữ tham chiếu đến các phần tử DOM, 
lưu trữ dữ liệu có thể thay đổi mà không gây ra việc re-render, hoặc thậm chí lưu trữ 
giá trị của một biến trong toàn bộ vòng đời của component.

TODO:========== Fetch track from Remote url ==========#111
    1. CORS là gì ?
CORS === Cross-Origin Resource Sharing
CORS là cơ chế "mặc định" của trình duyệt web (browser) khi gọi/truy cập thông tin khác
tên miền (domain) -> tránh truy cập các tài nguyên của của domain khác vô tội vạ
    Ví dụ: từ google.com gọi sang facebook.com -> browser chặn CORS
    từ localhost:3000 -> gọi localhost:8000 -> chặn CORS
Why ?
Với browser, khi bạn truy cập/gọi tới 1 website bất kỳ, browser sẽ tự động gửi cookies
kèm theo
Browser có cookies, nên nếu không chặn CORS, sẽ tìm ẩn nguy cơ ăn trộm cookies

    2. Cách khắc phục CORS ?
- Nếu bạn sử dụng cơ chế client (browser) -> gọi Server để lấy dữ liệu, fix lỗi CORS
trên server
- Nếu bạn không code backend, có thể fix = cách disable cors của browser (NOT
recommended)
- Sử dụng same domain, hoặc server gọi tới server
Mô hình:
    Nextjs (client) -> gọi tới Nextjs (server) : không bị CORS do cùng domain
    (localhost:3000)
    Nextjs (server) -> gọi tới Backend
    Nextjs (server) trả kết quả cho Nextjs (client)

TODO:========== Tạo wavesurfer hook ==========#112
Tại sao cần tạo wavesurfer Hook?
- Mục đích: truy cập tới instance của wavesurfer
Nhờ có instance (đối tượng), chúng ta có thể thao tác được các functions mà thư viện
cung cấp mọi lúc, mọi nơi

TODO:========== useMemo ==========#113
dùng để lưu trữ lại một giá trị -> biến số sẽ không bị re-render lại 

sử dụng useMemo => tránh re-render không cần thiết

trong 1 component chứa các phần tử(A B C D) -> khi 1 trong 4 cái re-render dẫn đến tất cả bị
re-render lại (do dùng hook), khi không muốn phần tử nào re-render lại thì sử dụng useMemo

FIXME: typescript Omit type dùng để bỏ đi một số kiểu type trong interface
Omit<interface, kiểu type muốn bỏ>  ->  Omit<WaveSurferOptions, "container">

TODO:========== useCallback ==========#114
sử dụng để tránh re-render khi không cần thiết

Cả useMemo và useCallback đều là hooks trong React được sử dụng để tối ưu hóa hiệu suất của 
ứng dụng bằng cách tránh việc tính toán không cần thiết hoặc tạo ra các hàm callback mới mỗi 
khi component render lại. Tuy nhiên, chúng có một số điểm khác biệt quan trọng:

    useMemo: Hook này sử dụng để memoize (lưu trữ kết quả) của một biểu thức, giúp tránh việc 
    tính toán lại giá trị đó trong các lần render sau. Khi giá trị dependencies (các phụ thuộc) của 
    useMemo thay đổi, nó sẽ tính toán lại giá trị và trả về kết quả mới.

    useCallback: Hook này được sử dụng để memoize (lưu trữ) một hàm callback, giúp tránh việc 
    tạo ra các hàm mới mỗi khi component render lại, đặc biệt hữu ích khi truyền hàm callback này 
    xuống các component con. useCallback trả về một phiên bản mới của hàm callback chỉ khi 
    dependencies thay đổi.

        const memoizedCallback = useCallback(
        () => {
            // Logic của hàm callback
        },
        [dependencies]
        );

Cách sử dụng tương tự useMemo chi khác 1 chỗ
useMemo dùng để lưu trữ 1 giá trị còn useCallback dùng để lưu trữ lại một function 
    1. dependencies = [] -> hook này chỉ chạy render đúng 1 lần
    2. dependencies = [value] -> hook này chỉ re-render khi giá trị của value thay đổi

FIXME:
npm i --save-exact sass@1.67.0

TODO:========== Next-auth ========== #125
Xác thực người dùng với backend và tài khoản mạng xã hội (social media)sử dụng hệ
thống với Next.JS và Next-auth.
- Là dự án mã nguồn mở, cung cấp giải pháp authentication cho Next.js app
- Hỗ trợ cơ chế stateful (session) và stateless (JWT - json web token)
- An toàn (Security by default)

FIXME:
npm i --save-exact next-auth@4.23.1

TODO:========== Luồng hoạt động của Next-auth ? ========== #130
Lưu ý 1: Nextjs với authentication, đang đóng vai trò là backend . Không dùng frontend
làm authentication (vì dễ bị hack)
Lưu ý 2: Khi sử dụng Provider, chúng ta đang "không quản lý người dùng", vậy làm sao
để mỗi lần F5 (refresh), chúng ta biết được ai là người đang đăng nhập ?

..........vẫn còn

TODO:========== useSession ==========
sử dụng để lấy data session (thông tin được Provider gửi về và lưu tại cookies)

FIXME: thông tin người dùng sau khi đăng nhập ở Provider sẽ được lưu vào bên trong cookies
-> Quá trình lưu trữ cookies, giải mã cookies sẽ được thư viện NextAuth làm trên phía server,
giải mã xong sẽ nạp vào trong token -> biết được ai đăng nhập

FIXME: npm i --save-exact react-dropzone@14.2.3 axios@1.5.0

TODO: ========== Axios ==========
dùng để load % upload

TODO: ========== Quản lý các React State Global ========== #158
(vấn đề gặp phải khi kiểm soát cùng lúc state cùng cấp hoặc các state không liên quan)
- Một số thư viện nổi tiếng có thể hỗ trợ manage state
    1. Redux
    2. React query
    3. Mobx
    4. Recoil

useContext
Tại sao dùng React Context API: giúp quản lý một vài hoặc nhiều state cùng 1 lúc
    - Không cần cài đặt thêm thư viện, vì đây là 1 api đã tích hợp sẵn trong React
    - Dữ liệu lưu trữ là đơn giản => context API giải quyết tốt
    - Đối với các bài toán phức tạp => sử dụng thư viện để quản lý (management). React
    context đơn thuần là "sharing" data

Kỹ thuật extend interface (kế thừa lại interface) -> dùng để tránh ảnh hưởng đến code cũ đã kế
thừa từ interface cũ
    interface I...new extends I...old {
        isPlaying: boolean;
    }

FIXME: bug khi sử dụng "use client" đồng thời sử dụng async 
(chỉ xảy ra tại trang page nơi thực hiện SSR -> DetailTrackPage)

FIXME: 
npm i --save-exact dayjs@1.11.10   #163

TODO: ========== router.refresh() ==========

thực hiện việc làm mới trạng thái của router. Nó làm mới các route hiện tại, làm mới dữ liệu 
từ các API hoặc làm mới bất kỳ dữ liệu nào liên quan đến routing trong ứng dụng
=> Việc làm mới router có thể hữu ích trong nhiều tình huống, chẳng hạn như khi cần cập nhật 
dữ liệu hiển thị trên một trang mà không cần tải lại toàn bộ trang web. Điều này giúp cải thiện 
trải nghiệm người dùng và giảm thiểu thời gian chờ đợi
---> Nói chung là làm mới trang web

TODO: ========== Metadata - SEO ========== #169
Next.js cung cấp các API về Metadata, giúp chúng ta có thể cải thiện SEO cũng như khả
năng chia sẻ website (qua các mạng xã hội)
-> title thay đổi linh hoạt

Các kỹ thuật tối ưu hóa SEO cơ bản bao gồm:
    1.Thêm tiêu đề, miêu tả cho web page
    //todo: demo
    ứng với tag <title> và <meta name='description'> tại <head>
    2. Thêm miêu tả, image khi share link qua các mạng xã hội như Facebook,
    Twitter..
    //todo: demo
    - ứng với tag
    <meta property="og:title"> (og: open graph meta data)
    <meta property="twitter:title">
    3. Thêm logo cho website
    //todo: demo
    Bao gồm các file favicon.icon, apple-icon.jpg, icon.jpg
    4. Tạo URL "thân thiện" cho việc search (khái niệm slug)
    //todo: demo
    5. File hỗ trợ cho bot crawl
    Bao gồm: robots.txt, sitemap.xml, JSON-LD, manifest.json
    6. Responsive Images với Next Image

FIXME:
npm install -g localtunnel #173.2
    -> Localtunnel là một công cụ giúp bạn chia sẻ ứng dụng hoặc trang web đang chạy trên máy tính 
    cục bộ của bạn với người khác trên internet một cách dễ dàng. Khi bạn phát triển một ứng dụng 
    web hoặc một trang web trên máy tính cá nhân, ứng dụng đó thường chỉ có thể truy cập thông qua 
    localhost trên máy tính của bạn. Tuy nhiên, để chia sẻ nó với người khác, họ cần phải truy cập 
    vào cùng một mạng hoặc cùng một máy tính.

FIXME:
npm i --save-exact slugify@1.6.6
    -> Gói slugify thường được sử dụng để tạo ra các chuỗi đường dẫn (slug) từ các chuỗi văn bản. 
    Mục đích chính của nó là chuyển đổi các chuỗi văn bản thành các chuỗi dễ đọc, thân thiện 
    với SEO, thích hợp cho việc sử dụng trong các URL hoặc các nguồn dữ liệu khác.
    "phố lên đèn" sau khi slug -> "pho-len-den"

---------- Các file thêm tối ưu SEO: Robot.txt, sitemap và manifest.json #176

---------- JSON-LD

TODO: ========== Next Image ==========#178
- Nén ảnh lại chuyển đổi định dạng ảnh giúp ảnh được load nhanh hơn, tăng trải nghiệm người dùng
- Tự động co dãn hình ảnh

        import Image from "next/image";
        import flower from "../../public/flowers.jpg";

        <img src="flowers.jpg" />
        <Image src={flower} alt="thông tin ảnh bông hoa" />

-> dùng img thông thường load bức ảnh 5.8MB, 
dùng Image của NextJS thì kích thước ảnh load còn 521kB

Khi sử dụng hình ảnh từ BE sẽ xảy ra lỗi -> sử dụng next.config.js để thêm thông tin images

FIXME:
npm i --save-exact next-nprogress-bar@2.1.2
-> dùng hiển thị loading tiến trình trang web

TODO: ========== Not Found ==========
Thực chất thì NextJS đã hỗ trợ hiển thị trang not-found rồi nhưng đôi khi lại không
import { notFound } from 'next/navigation'

2 cách hiển thị trang not-found:
    1. khai báo bên ngoài file (global) khi có lỗi liên quan đến url không tồn tại
    (hoặc các lỗi khác) sẽ hiển thị trang not-found
    2. khai báo cùng cấp -> dùng đk để kiểm tra dữ liệu nếu không có dữ liệu thì hiển thị
    trang not-found

TODO: ========== Middleware ==========#181
Như cái tên: là người đứng giữa can thiệp vào request, respone
Mô hình: request -> middleware -> response
(Khái niệm này thường tồn tại ở phía BE)

-> sử dụng middleware của NextAuth cung cấp

TODO: ========== NextJS Build Script ========== #183
- Môi trường dev:
    + code typescript => khi chạy, cần dịch code từ typescript sang javascript
    + để có hot reloading, và tăng tốc độ => cần lưu code dịch (từ ts sang js) vào RAM
    => thông thường, sẽ chậm trong lần đầu vào giao diện
- Môi trường production:
    + đã dịch "tất cả" code từ ts sang javascript => ko cần tới RAM
    + tốc độ nhanh nhất (vì code là final và "đã build")

2. Quá trình build nextjs
- Bước 1: đã code xong dự án
- Bước 2: chạy câu lệnh: npm run build
    mục đích của câu lệnh này, là dịch "tất cả code từ typescript sang javascript", vì browser
    chỉ hiểu js
    Input: source code trong thư mục src/thư mục public/node_modules
    Output: thư mục .next
- Bước 3: test/preview dự án đã build, bằng câu lệnh: npm start
    Lưu ý: khi chạy tại chế độ build (bước 3), nếu chúng ta sửa đổi code, sẽ không có "hot
    reloading"
    muốn xem sự thay đổi => cần build lại
    muốn hot reloading => chạy tại chế độ dev

TODO: ========== Build with Docker ========== #184

việc chia 2 thành 2 file env để phân biệt file khi chạy ở chế độ development và chế độ production
...

TODO: ========== Giải thích khái niệm khi build dự án ========== 
Sever (Server Side rendering)

Static (Web tĩnh): nơi dữ liệu được render ra ngay từ trước và được gửi đến trình duyệt 
mà không cần tính toán dữ liệu trên máy chủ mỗi lần yêu cầu. Khi bạn sử dụng trang tĩnh, 
nó tạo ra các tệp HTML cho mỗi trang tại thời điểm xây dựng dự án và chỉ thay đổi khi dữ liệu mới 
được cập nhật.

SSG (Static Site Generation): Đây là một phương pháp tạo ra các trang web tĩnh trước đó tại thời 
điểm xây dựng, mà không cần đến máy chủ khi người dùng yêu cầu. SSG giúp tăng tốc độ tải trang bằng 
cách cung cấp các trang tĩnh đã được tạo trước cho người dùng, giảm tải cho máy chủ và cải thiện 
trải nghiệm người dùng

    FIXME: 
    Xảy ra bug khi sử dụng ở chế độ npm run build 
    -> hiện ra thông báo: "Entire page /track/upload deopted into client-side rendering"
    Có nghĩa đang bị convert thành CSR (do sử dụng route group nên SSR không ăn)

Sử dụng generateStaticParams được NextJS cung cấp để thực hiện SSG cho trang web
-> để thực hiện được SSG cho trang track/[slug] -> cần chuyển folder ra ngoài cùng cấp với api để 
tránh xảy ra lỗi do route group gây ra

TODO: ----- Revalidating data (Time based revalidation) ----- #189
Giải thích: SSG là việc render trước ra file HTML để khi hiển thị chỉ việc lấy ra hiển thị thôi !!!
-> Vấn đề: làm sao update file HTML khi đã render ra rồi (sau khi build dự án)
-> có 2 cách là dùng revalidateTag hoặc revalidatePath
    + revalidatePath: revalidate lại nguyên 1 trang dựa vào link api
    + revalidateTag: dựa vào id nên chỉ revalidate trang nào chứa link api cần

revalidatePath vs. router.refresh:
router.refresh không clear "Data cache" (chỉ clear router cache và re-render page) 
=> dùng cache: "no-store"

===> Sử dụng revalidateTag
Giúp người quản lý cập nhật lại dữ liệu API khi đã build dự án rồi

Cơ chế hoạt động vô hiệu hóa bộ đệm - nơi lưu trữ dữ liệu trước đó (clear cache) -> router.refresh() 
làm mới trang web (sau khi dữ liệu được xử lý (xóa cache -> cập nhật dữ liệu mới nhất))

    // thực hiện lại validate lại dữ liệu API nếu link api được gọi lại -> clear data cache
    await sendRequest<IBackendRes<any>>({
        url: `/api/revalidate`,
        method: "POST",
        queryParams: {
        tag: "track-by-profile", // kiểm tra tag có giống tag ở cha không -> xác định dữ liệu cần làm mới
        secret: "justatestenxtjs", // !!! có thể bị lỗi secret thông tin do chạy ở client
        },
    });
    router.refresh();

TODO: ----- Login with Google ----- #193
B1: Truy cập console.cloud.google.com để tạo prj -> chọn dự án
B2: Tạo OAuth client ID tại phần Credentials
B3: Thực hiện khia báo thông tin tại phần "Configure consent screen" để cung cấp, 
xác thực lại thông tin 
B4: Tạo OAuth client ID

TODO: ----- Thực hiện refresh token ----- #194
Nhằm load lại dữ liệu token trước khi hết hạn -> 

FIXME: 
--- Tối ưu hóa hình ảnh ở chế độ production: npm i sharp 

--- Cài đặt kiểm tra version mới nhất của các thư viện: 
npm install -g npm-check-updates -> Sử dụng: ncu
